<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="694" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="677.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="677.00"> </text><svg id="frames" x="10" width="1180" total_samples="1141"><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.18%)</title><rect x="0.1753%" y="581" width="0.1753%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="2"/><text x="0.4253%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.18%)</title><rect x="0.1753%" y="565" width="0.1753%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="2"/><text x="0.4253%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.09%)</title><rect x="0.2629%" y="549" width="0.0876%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.5129%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="0.2629%" y="533" width="0.0876%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.5129%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.61%)</title><rect x="0.0000%" y="597" width="0.6135%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="7"/><text x="0.2500%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.26%)</title><rect x="0.3506%" y="581" width="0.2629%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="3"/><text x="0.6006%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="0.5259%" y="565" width="0.0876%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="1"/><text x="0.7759%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.70%)</title><rect x="0.0000%" y="613" width="0.7011%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="8"/><text x="0.2500%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="0.6135%" y="597" width="0.0876%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="1"/><text x="0.8635%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (1 samples, 0.09%)</title><rect x="0.7011%" y="341" width="0.0876%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="1"/><text x="0.9511%" y="351.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.09%)</title><rect x="0.7011%" y="325" width="0.0876%" height="15" fill="rgb(250,228,42)" fg:x="8" fg:w="1"/><text x="0.9511%" y="335.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (1 samples, 0.09%)</title><rect x="0.7011%" y="309" width="0.0876%" height="15" fill="rgb(240,193,28)" fg:x="8" fg:w="1"/><text x="0.9511%" y="319.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1 samples, 0.09%)</title><rect x="0.7011%" y="293" width="0.0876%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="1"/><text x="0.9511%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for &amp;A&gt;::cmp (1 samples, 0.09%)</title><rect x="0.7011%" y="277" width="0.0876%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="1"/><text x="0.9511%" y="287.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (1 samples, 0.09%)</title><rect x="0.7011%" y="261" width="0.0876%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="1"/><text x="0.9511%" y="271.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (1 samples, 0.09%)</title><rect x="0.7011%" y="245" width="0.0876%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="1"/><text x="0.9511%" y="255.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (1 samples, 0.09%)</title><rect x="0.7011%" y="229" width="0.0876%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="1"/><text x="0.9511%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="0.7011%" y="213" width="0.0876%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="1"/><text x="0.9511%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (1 samples, 0.09%)</title><rect x="0.7888%" y="325" width="0.0876%" height="15" fill="rgb(221,200,47)" fg:x="9" fg:w="1"/><text x="1.0388%" y="335.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.09%)</title><rect x="0.7888%" y="309" width="0.0876%" height="15" fill="rgb(226,26,5)" fg:x="9" fg:w="1"/><text x="1.0388%" y="319.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (1 samples, 0.09%)</title><rect x="0.7888%" y="293" width="0.0876%" height="15" fill="rgb(249,33,26)" fg:x="9" fg:w="1"/><text x="1.0388%" y="303.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1 samples, 0.09%)</title><rect x="0.7888%" y="277" width="0.0876%" height="15" fill="rgb(235,183,28)" fg:x="9" fg:w="1"/><text x="1.0388%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.18%)</title><rect x="0.7888%" y="341" width="0.1753%" height="15" fill="rgb(221,5,38)" fg:x="9" fg:w="2"/><text x="1.0388%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.09%)</title><rect x="0.8764%" y="325" width="0.0876%" height="15" fill="rgb(247,18,42)" fg:x="10" fg:w="1"/><text x="1.1264%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.09%)</title><rect x="0.9641%" y="325" width="0.0876%" height="15" fill="rgb(241,131,45)" fg:x="11" fg:w="1"/><text x="1.2141%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.09%)</title><rect x="0.9641%" y="309" width="0.0876%" height="15" fill="rgb(249,31,29)" fg:x="11" fg:w="1"/><text x="1.2141%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.09%)</title><rect x="0.9641%" y="293" width="0.0876%" height="15" fill="rgb(225,111,53)" fg:x="11" fg:w="1"/><text x="1.2141%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.09%)</title><rect x="0.9641%" y="277" width="0.0876%" height="15" fill="rgb(238,160,17)" fg:x="11" fg:w="1"/><text x="1.2141%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.09%)</title><rect x="0.9641%" y="261" width="0.0876%" height="15" fill="rgb(214,148,48)" fg:x="11" fg:w="1"/><text x="1.2141%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.09%)</title><rect x="0.9641%" y="245" width="0.0876%" height="15" fill="rgb(232,36,49)" fg:x="11" fg:w="1"/><text x="1.2141%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.09%)</title><rect x="0.9641%" y="229" width="0.0876%" height="15" fill="rgb(209,103,24)" fg:x="11" fg:w="1"/><text x="1.2141%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.09%)</title><rect x="0.9641%" y="213" width="0.0876%" height="15" fill="rgb(229,88,8)" fg:x="11" fg:w="1"/><text x="1.2141%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.09%)</title><rect x="0.9641%" y="197" width="0.0876%" height="15" fill="rgb(213,181,19)" fg:x="11" fg:w="1"/><text x="1.2141%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.09%)</title><rect x="0.9641%" y="181" width="0.0876%" height="15" fill="rgb(254,191,54)" fg:x="11" fg:w="1"/><text x="1.2141%" y="191.50"></text></g><g><title>dev::minimum_cut::_{{closure}} (1 samples, 0.09%)</title><rect x="0.9641%" y="165" width="0.0876%" height="15" fill="rgb(241,83,37)" fg:x="11" fg:w="1"/><text x="1.2141%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.09%)</title><rect x="0.9641%" y="149" width="0.0876%" height="15" fill="rgb(233,36,39)" fg:x="11" fg:w="1"/><text x="1.2141%" y="159.50"></text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::from_sorted_iter (1 samples, 0.09%)</title><rect x="0.9641%" y="133" width="0.0876%" height="15" fill="rgb(226,3,54)" fg:x="11" fg:w="1"/><text x="1.2141%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::set::BTreeSet&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.09%)</title><rect x="1.0517%" y="309" width="0.0876%" height="15" fill="rgb(245,192,40)" fg:x="12" fg:w="1"/><text x="1.3017%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.09%)</title><rect x="1.0517%" y="293" width="0.0876%" height="15" fill="rgb(238,167,29)" fg:x="12" fg:w="1"/><text x="1.3017%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.09%)</title><rect x="1.0517%" y="277" width="0.0876%" height="15" fill="rgb(232,182,51)" fg:x="12" fg:w="1"/><text x="1.3017%" y="287.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (1 samples, 0.09%)</title><rect x="1.0517%" y="261" width="0.0876%" height="15" fill="rgb(231,60,39)" fg:x="12" fg:w="1"/><text x="1.3017%" y="271.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (1 samples, 0.09%)</title><rect x="1.0517%" y="245" width="0.0876%" height="15" fill="rgb(208,69,12)" fg:x="12" fg:w="1"/><text x="1.3017%" y="255.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (1 samples, 0.09%)</title><rect x="1.0517%" y="229" width="0.0876%" height="15" fill="rgb(235,93,37)" fg:x="12" fg:w="1"/><text x="1.3017%" y="239.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.09%)</title><rect x="1.0517%" y="213" width="0.0876%" height="15" fill="rgb(213,116,39)" fg:x="12" fg:w="1"/><text x="1.3017%" y="223.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1 samples, 0.09%)</title><rect x="1.0517%" y="197" width="0.0876%" height="15" fill="rgb(222,207,29)" fg:x="12" fg:w="1"/><text x="1.3017%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.09%)</title><rect x="1.0517%" y="181" width="0.0876%" height="15" fill="rgb(206,96,30)" fg:x="12" fg:w="1"/><text x="1.3017%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.09%)</title><rect x="1.0517%" y="165" width="0.0876%" height="15" fill="rgb(218,138,4)" fg:x="12" fg:w="1"/><text x="1.3017%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.09%)</title><rect x="1.0517%" y="149" width="0.0876%" height="15" fill="rgb(250,191,14)" fg:x="12" fg:w="1"/><text x="1.3017%" y="159.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="1.0517%" y="133" width="0.0876%" height="15" fill="rgb(239,60,40)" fg:x="12" fg:w="1"/><text x="1.3017%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="1.0517%" y="117" width="0.0876%" height="15" fill="rgb(206,27,48)" fg:x="12" fg:w="1"/><text x="1.3017%" y="127.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (1 samples, 0.09%)</title><rect x="1.1394%" y="309" width="0.0876%" height="15" fill="rgb(225,35,8)" fg:x="13" fg:w="1"/><text x="1.3894%" y="319.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.09%)</title><rect x="1.1394%" y="293" width="0.0876%" height="15" fill="rgb(250,213,24)" fg:x="13" fg:w="1"/><text x="1.3894%" y="303.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (1 samples, 0.09%)</title><rect x="1.1394%" y="277" width="0.0876%" height="15" fill="rgb(247,123,22)" fg:x="13" fg:w="1"/><text x="1.3894%" y="287.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1 samples, 0.09%)</title><rect x="1.1394%" y="261" width="0.0876%" height="15" fill="rgb(231,138,38)" fg:x="13" fg:w="1"/><text x="1.3894%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (1 samples, 0.09%)</title><rect x="1.1394%" y="245" width="0.0876%" height="15" fill="rgb(231,145,46)" fg:x="13" fg:w="1"/><text x="1.3894%" y="255.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (1 samples, 0.09%)</title><rect x="1.1394%" y="229" width="0.0876%" height="15" fill="rgb(251,118,11)" fg:x="13" fg:w="1"/><text x="1.3894%" y="239.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (1 samples, 0.09%)</title><rect x="1.1394%" y="213" width="0.0876%" height="15" fill="rgb(217,147,25)" fg:x="13" fg:w="1"/><text x="1.3894%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="1.1394%" y="197" width="0.0876%" height="15" fill="rgb(247,81,37)" fg:x="13" fg:w="1"/><text x="1.3894%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (1 samples, 0.09%)</title><rect x="1.5776%" y="117" width="0.0876%" height="15" fill="rgb(209,12,38)" fg:x="18" fg:w="1"/><text x="1.8276%" y="127.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (2 samples, 0.18%)</title><rect x="1.5776%" y="181" width="0.1753%" height="15" fill="rgb(227,1,9)" fg:x="18" fg:w="2"/><text x="1.8276%" y="191.50"></text></g><g><title>alloc::collections::btree::mem::replace (2 samples, 0.18%)</title><rect x="1.5776%" y="165" width="0.1753%" height="15" fill="rgb(248,47,43)" fg:x="18" fg:w="2"/><text x="1.8276%" y="175.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (2 samples, 0.18%)</title><rect x="1.5776%" y="149" width="0.1753%" height="15" fill="rgb(221,10,30)" fg:x="18" fg:w="2"/><text x="1.8276%" y="159.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next (2 samples, 0.18%)</title><rect x="1.5776%" y="133" width="0.1753%" height="15" fill="rgb(210,229,1)" fg:x="18" fg:w="2"/><text x="1.8276%" y="143.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (1 samples, 0.09%)</title><rect x="1.6652%" y="117" width="0.0876%" height="15" fill="rgb(222,148,37)" fg:x="19" fg:w="1"/><text x="1.9152%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.09%)</title><rect x="1.6652%" y="101" width="0.0876%" height="15" fill="rgb(234,67,33)" fg:x="19" fg:w="1"/><text x="1.9152%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.09%)</title><rect x="1.6652%" y="85" width="0.0876%" height="15" fill="rgb(247,98,35)" fg:x="19" fg:w="1"/><text x="1.9152%" y="95.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="1.6652%" y="69" width="0.0876%" height="15" fill="rgb(247,138,52)" fg:x="19" fg:w="1"/><text x="1.9152%" y="79.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="1.6652%" y="53" width="0.0876%" height="15" fill="rgb(213,79,30)" fg:x="19" fg:w="1"/><text x="1.9152%" y="63.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="1.6652%" y="37" width="0.0876%" height="15" fill="rgb(246,177,23)" fg:x="19" fg:w="1"/><text x="1.9152%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::set::BTreeSet&lt;&amp;str&gt;&gt; (7 samples, 0.61%)</title><rect x="1.2270%" y="309" width="0.6135%" height="15" fill="rgb(230,62,27)" fg:x="14" fg:w="7"/><text x="1.4770%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;&amp;str,alloc::collections::btree::set_val::SetValZST&gt;&gt; (7 samples, 0.61%)</title><rect x="1.2270%" y="293" width="0.6135%" height="15" fill="rgb(216,154,8)" fg:x="14" fg:w="7"/><text x="1.4770%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.61%)</title><rect x="1.2270%" y="277" width="0.6135%" height="15" fill="rgb(244,35,45)" fg:x="14" fg:w="7"/><text x="1.4770%" y="287.50"></text></g><g><title>core::mem::drop (7 samples, 0.61%)</title><rect x="1.2270%" y="261" width="0.6135%" height="15" fill="rgb(251,115,12)" fg:x="14" fg:w="7"/><text x="1.4770%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;&amp;str,alloc::collections::btree::set_val::SetValZST&gt;&gt; (7 samples, 0.61%)</title><rect x="1.2270%" y="245" width="0.6135%" height="15" fill="rgb(240,54,50)" fg:x="14" fg:w="7"/><text x="1.4770%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.61%)</title><rect x="1.2270%" y="229" width="0.6135%" height="15" fill="rgb(233,84,52)" fg:x="14" fg:w="7"/><text x="1.4770%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (6 samples, 0.53%)</title><rect x="1.3146%" y="213" width="0.5259%" height="15" fill="rgb(207,117,47)" fg:x="15" fg:w="6"/><text x="1.5646%" y="223.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (3 samples, 0.26%)</title><rect x="1.5776%" y="197" width="0.2629%" height="15" fill="rgb(249,43,39)" fg:x="18" fg:w="3"/><text x="1.8276%" y="207.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (1 samples, 0.09%)</title><rect x="1.7528%" y="181" width="0.0876%" height="15" fill="rgb(209,38,44)" fg:x="20" fg:w="1"/><text x="2.0028%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.09%)</title><rect x="2.0158%" y="261" width="0.0876%" height="15" fill="rgb(236,212,23)" fg:x="23" fg:w="1"/><text x="2.2658%" y="271.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (1 samples, 0.09%)</title><rect x="2.0158%" y="245" width="0.0876%" height="15" fill="rgb(242,79,21)" fg:x="23" fg:w="1"/><text x="2.2658%" y="255.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (1 samples, 0.09%)</title><rect x="2.0158%" y="229" width="0.0876%" height="15" fill="rgb(211,96,35)" fg:x="23" fg:w="1"/><text x="2.2658%" y="239.50"></text></g><g><title>alloc::collections::btree::mem::replace (1 samples, 0.09%)</title><rect x="2.0158%" y="213" width="0.0876%" height="15" fill="rgb(253,215,40)" fg:x="23" fg:w="1"/><text x="2.2658%" y="223.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::_{{closure}} (1 samples, 0.09%)</title><rect x="2.0158%" y="197" width="0.0876%" height="15" fill="rgb(211,81,21)" fg:x="23" fg:w="1"/><text x="2.2658%" y="207.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (1 samples, 0.09%)</title><rect x="2.0158%" y="181" width="0.0876%" height="15" fill="rgb(208,190,38)" fg:x="23" fg:w="1"/><text x="2.2658%" y="191.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (1 samples, 0.09%)</title><rect x="2.0158%" y="165" width="0.0876%" height="15" fill="rgb(235,213,38)" fg:x="23" fg:w="1"/><text x="2.2658%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (12 samples, 1.05%)</title><rect x="4.9956%" y="149" width="1.0517%" height="15" fill="rgb(237,122,38)" fg:x="57" fg:w="12"/><text x="5.2456%" y="159.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (19 samples, 1.67%)</title><rect x="4.7327%" y="165" width="1.6652%" height="15" fill="rgb(244,218,35)" fg:x="54" fg:w="19"/><text x="4.9827%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (4 samples, 0.35%)</title><rect x="6.0473%" y="149" width="0.3506%" height="15" fill="rgb(240,68,47)" fg:x="69" fg:w="4"/><text x="6.2973%" y="159.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (4 samples, 0.35%)</title><rect x="6.3979%" y="165" width="0.3506%" height="15" fill="rgb(210,16,53)" fg:x="73" fg:w="4"/><text x="6.6479%" y="175.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (2 samples, 0.18%)</title><rect x="6.5732%" y="149" width="0.1753%" height="15" fill="rgb(235,124,12)" fg:x="75" fg:w="2"/><text x="6.8232%" y="159.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (1 samples, 0.09%)</title><rect x="6.6608%" y="133" width="0.0876%" height="15" fill="rgb(224,169,11)" fg:x="76" fg:w="1"/><text x="6.9108%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (102 samples, 8.94%)</title><rect x="2.1034%" y="245" width="8.9395%" height="15" fill="rgb(250,166,2)" fg:x="24" fg:w="102"/><text x="2.3534%" y="255.50">&lt;alloc::colle..</text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (102 samples, 8.94%)</title><rect x="2.1034%" y="229" width="8.9395%" height="15" fill="rgb(242,216,29)" fg:x="24" fg:w="102"/><text x="2.3534%" y="239.50">alloc::collec..</text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (102 samples, 8.94%)</title><rect x="2.1034%" y="213" width="8.9395%" height="15" fill="rgb(230,116,27)" fg:x="24" fg:w="102"/><text x="2.3534%" y="223.50">alloc::collec..</text></g><g><title>alloc::collections::btree::mem::replace (102 samples, 8.94%)</title><rect x="2.1034%" y="197" width="8.9395%" height="15" fill="rgb(228,99,48)" fg:x="24" fg:w="102"/><text x="2.3534%" y="207.50">alloc::collec..</text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::_{{closure}} (102 samples, 8.94%)</title><rect x="2.1034%" y="181" width="8.9395%" height="15" fill="rgb(253,11,6)" fg:x="24" fg:w="102"/><text x="2.3534%" y="191.50">alloc::collec..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (49 samples, 4.29%)</title><rect x="6.7485%" y="165" width="4.2945%" height="15" fill="rgb(247,143,39)" fg:x="77" fg:w="49"/><text x="6.9985%" y="175.50">alloc..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (49 samples, 4.29%)</title><rect x="6.7485%" y="149" width="4.2945%" height="15" fill="rgb(236,97,10)" fg:x="77" fg:w="49"/><text x="6.9985%" y="159.50">core:..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (49 samples, 4.29%)</title><rect x="6.7485%" y="133" width="4.2945%" height="15" fill="rgb(233,208,19)" fg:x="77" fg:w="49"/><text x="6.9985%" y="143.50">&lt;usiz..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (49 samples, 4.29%)</title><rect x="6.7485%" y="117" width="4.2945%" height="15" fill="rgb(216,164,2)" fg:x="77" fg:w="49"/><text x="6.9985%" y="127.50">core:..</text></g><g><title>dev::get_most_tightly_connected_vertex (250 samples, 21.91%)</title><rect x="1.8405%" y="309" width="21.9106%" height="15" fill="rgb(220,129,5)" fg:x="21" fg:w="250"/><text x="2.0905%" y="319.50">dev::get_most_tightly_connected_ver..</text></g><g><title>core::iter::traits::iterator::Iterator::max_by (248 samples, 21.74%)</title><rect x="2.0158%" y="293" width="21.7353%" height="15" fill="rgb(242,17,10)" fg:x="23" fg:w="248"/><text x="2.2658%" y="303.50">core::iter::traits::iterator::Iter..</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (248 samples, 21.74%)</title><rect x="2.0158%" y="277" width="21.7353%" height="15" fill="rgb(242,107,0)" fg:x="23" fg:w="248"/><text x="2.2658%" y="287.50">core::iter::traits::iterator::Iter..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (247 samples, 21.65%)</title><rect x="2.1034%" y="261" width="21.6477%" height="15" fill="rgb(251,28,31)" fg:x="24" fg:w="247"/><text x="2.3534%" y="271.50">core::iter::traits::iterator::Iter..</text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::_{{closure}} (145 samples, 12.71%)</title><rect x="11.0429%" y="245" width="12.7082%" height="15" fill="rgb(233,223,10)" fg:x="126" fg:w="145"/><text x="11.2929%" y="255.50">core::iter::traits:..</text></g><g><title>core::cmp::max_by (145 samples, 12.71%)</title><rect x="11.0429%" y="229" width="12.7082%" height="15" fill="rgb(215,21,27)" fg:x="126" fg:w="145"/><text x="11.2929%" y="239.50">core::cmp::max_by</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.09%)</title><rect x="23.6635%" y="213" width="0.0876%" height="15" fill="rgb(232,23,21)" fg:x="270" fg:w="1"/><text x="23.9135%" y="223.50"></text></g><g><title>dev::get_most_tightly_connected_vertex::_{{closure}} (1 samples, 0.09%)</title><rect x="23.6635%" y="197" width="0.0876%" height="15" fill="rgb(244,5,23)" fg:x="270" fg:w="1"/><text x="23.9135%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.09%)</title><rect x="23.6635%" y="181" width="0.0876%" height="15" fill="rgb(226,81,46)" fg:x="270" fg:w="1"/><text x="23.9135%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (2 samples, 0.18%)</title><rect x="23.7511%" y="293" width="0.1753%" height="15" fill="rgb(247,70,30)" fg:x="271" fg:w="2"/><text x="24.0011%" y="303.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 0.18%)</title><rect x="23.7511%" y="277" width="0.1753%" height="15" fill="rgb(212,68,19)" fg:x="271" fg:w="2"/><text x="24.0011%" y="287.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (2 samples, 0.18%)</title><rect x="23.7511%" y="261" width="0.1753%" height="15" fill="rgb(240,187,13)" fg:x="271" fg:w="2"/><text x="24.0011%" y="271.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (2 samples, 0.18%)</title><rect x="23.7511%" y="245" width="0.1753%" height="15" fill="rgb(223,113,26)" fg:x="271" fg:w="2"/><text x="24.0011%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for &amp;A&gt;::cmp (1 samples, 0.09%)</title><rect x="23.8387%" y="229" width="0.0876%" height="15" fill="rgb(206,192,2)" fg:x="272" fg:w="1"/><text x="24.0887%" y="239.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (1 samples, 0.09%)</title><rect x="23.8387%" y="213" width="0.0876%" height="15" fill="rgb(241,108,4)" fg:x="272" fg:w="1"/><text x="24.0887%" y="223.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (1 samples, 0.09%)</title><rect x="23.8387%" y="197" width="0.0876%" height="15" fill="rgb(247,173,49)" fg:x="272" fg:w="1"/><text x="24.0887%" y="207.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (1 samples, 0.09%)</title><rect x="23.8387%" y="181" width="0.0876%" height="15" fill="rgb(224,114,35)" fg:x="272" fg:w="1"/><text x="24.0887%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="23.8387%" y="165" width="0.0876%" height="15" fill="rgb(245,159,27)" fg:x="272" fg:w="1"/><text x="24.0887%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.09%)</title><rect x="23.9264%" y="229" width="0.0876%" height="15" fill="rgb(245,172,44)" fg:x="273" fg:w="1"/><text x="24.1764%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.09%)</title><rect x="23.9264%" y="213" width="0.0876%" height="15" fill="rgb(236,23,11)" fg:x="273" fg:w="1"/><text x="24.1764%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get_mut (3 samples, 0.26%)</title><rect x="23.9264%" y="293" width="0.2629%" height="15" fill="rgb(205,117,38)" fg:x="273" fg:w="3"/><text x="24.1764%" y="303.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.26%)</title><rect x="23.9264%" y="277" width="0.2629%" height="15" fill="rgb(237,72,25)" fg:x="273" fg:w="3"/><text x="24.1764%" y="287.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (3 samples, 0.26%)</title><rect x="23.9264%" y="261" width="0.2629%" height="15" fill="rgb(244,70,9)" fg:x="273" fg:w="3"/><text x="24.1764%" y="271.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3 samples, 0.26%)</title><rect x="23.9264%" y="245" width="0.2629%" height="15" fill="rgb(217,125,39)" fg:x="273" fg:w="3"/><text x="24.1764%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (2 samples, 0.18%)</title><rect x="24.0140%" y="229" width="0.1753%" height="15" fill="rgb(235,36,10)" fg:x="274" fg:w="2"/><text x="24.2640%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (2 samples, 0.18%)</title><rect x="24.0140%" y="213" width="0.1753%" height="15" fill="rgb(251,123,47)" fg:x="274" fg:w="2"/><text x="24.2640%" y="223.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (2 samples, 0.18%)</title><rect x="24.0140%" y="197" width="0.1753%" height="15" fill="rgb(221,13,13)" fg:x="274" fg:w="2"/><text x="24.2640%" y="207.50"></text></g><g><title>[libc.so.6] (2 samples, 0.18%)</title><rect x="24.0140%" y="181" width="0.1753%" height="15" fill="rgb(238,131,9)" fg:x="274" fg:w="2"/><text x="24.2640%" y="191.50"></text></g><g><title>alloc::collections::btree::map::entry::Entry&lt;K,V,A&gt;::or_insert (1 samples, 0.09%)</title><rect x="24.1893%" y="293" width="0.0876%" height="15" fill="rgb(211,50,8)" fg:x="276" fg:w="1"/><text x="24.4393%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (1 samples, 0.09%)</title><rect x="24.2770%" y="229" width="0.0876%" height="15" fill="rgb(245,182,24)" fg:x="277" fg:w="1"/><text x="24.5270%" y="239.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (1 samples, 0.09%)</title><rect x="24.2770%" y="213" width="0.0876%" height="15" fill="rgb(242,14,37)" fg:x="277" fg:w="1"/><text x="24.5270%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (1 samples, 0.09%)</title><rect x="24.2770%" y="197" width="0.0876%" height="15" fill="rgb(246,228,12)" fg:x="277" fg:w="1"/><text x="24.5270%" y="207.50"></text></g><g><title>core::ptr::read (1 samples, 0.09%)</title><rect x="24.2770%" y="181" width="0.0876%" height="15" fill="rgb(213,55,15)" fg:x="277" fg:w="1"/><text x="24.5270%" y="191.50"></text></g><g><title>dev::merge_vertices (8 samples, 0.70%)</title><rect x="23.7511%" y="309" width="0.7011%" height="15" fill="rgb(209,9,3)" fg:x="271" fg:w="8"/><text x="24.0011%" y="319.50"></text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::insert (2 samples, 0.18%)</title><rect x="24.2770%" y="293" width="0.1753%" height="15" fill="rgb(230,59,30)" fg:x="277" fg:w="2"/><text x="24.5270%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.18%)</title><rect x="24.2770%" y="277" width="0.1753%" height="15" fill="rgb(209,121,21)" fg:x="277" fg:w="2"/><text x="24.5270%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (2 samples, 0.18%)</title><rect x="24.2770%" y="261" width="0.1753%" height="15" fill="rgb(220,109,13)" fg:x="277" fg:w="2"/><text x="24.5270%" y="271.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 0.18%)</title><rect x="24.2770%" y="245" width="0.1753%" height="15" fill="rgb(232,18,1)" fg:x="277" fg:w="2"/><text x="24.5270%" y="255.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (1 samples, 0.09%)</title><rect x="24.3646%" y="229" width="0.0876%" height="15" fill="rgb(215,41,42)" fg:x="278" fg:w="1"/><text x="24.6146%" y="239.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1 samples, 0.09%)</title><rect x="24.3646%" y="213" width="0.0876%" height="15" fill="rgb(224,123,36)" fg:x="278" fg:w="1"/><text x="24.6146%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for &amp;A&gt;::cmp (1 samples, 0.09%)</title><rect x="24.3646%" y="197" width="0.0876%" height="15" fill="rgb(240,125,3)" fg:x="278" fg:w="1"/><text x="24.6146%" y="207.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (1 samples, 0.09%)</title><rect x="24.3646%" y="181" width="0.0876%" height="15" fill="rgb(205,98,50)" fg:x="278" fg:w="1"/><text x="24.6146%" y="191.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (1 samples, 0.09%)</title><rect x="24.3646%" y="165" width="0.0876%" height="15" fill="rgb(205,185,37)" fg:x="278" fg:w="1"/><text x="24.6146%" y="175.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (1 samples, 0.09%)</title><rect x="24.3646%" y="149" width="0.0876%" height="15" fill="rgb(238,207,15)" fg:x="278" fg:w="1"/><text x="24.6146%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="24.3646%" y="133" width="0.0876%" height="15" fill="rgb(213,199,42)" fg:x="278" fg:w="1"/><text x="24.6146%" y="143.50"></text></g><g><title>&lt;&amp;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.09%)</title><rect x="26.6433%" y="293" width="0.0876%" height="15" fill="rgb(235,201,11)" fg:x="304" fg:w="1"/><text x="26.8933%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::iter (1 samples, 0.09%)</title><rect x="26.6433%" y="277" width="0.0876%" height="15" fill="rgb(207,46,11)" fg:x="304" fg:w="1"/><text x="26.8933%" y="287.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (10 samples, 0.88%)</title><rect x="26.7309%" y="213" width="0.8764%" height="15" fill="rgb(241,35,35)" fg:x="305" fg:w="10"/><text x="26.9809%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (10 samples, 0.88%)</title><rect x="26.7309%" y="197" width="0.8764%" height="15" fill="rgb(243,32,47)" fg:x="305" fg:w="10"/><text x="26.9809%" y="207.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (8 samples, 0.70%)</title><rect x="26.9062%" y="181" width="0.7011%" height="15" fill="rgb(247,202,23)" fg:x="307" fg:w="8"/><text x="27.1562%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.96%)</title><rect x="26.7309%" y="293" width="0.9641%" height="15" fill="rgb(219,102,11)" fg:x="305" fg:w="11"/><text x="26.9809%" y="303.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (11 samples, 0.96%)</title><rect x="26.7309%" y="277" width="0.9641%" height="15" fill="rgb(243,110,44)" fg:x="305" fg:w="11"/><text x="26.9809%" y="287.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (11 samples, 0.96%)</title><rect x="26.7309%" y="261" width="0.9641%" height="15" fill="rgb(222,74,54)" fg:x="305" fg:w="11"/><text x="26.9809%" y="271.50"></text></g><g><title>alloc::collections::btree::mem::replace (11 samples, 0.96%)</title><rect x="26.7309%" y="245" width="0.9641%" height="15" fill="rgb(216,99,12)" fg:x="305" fg:w="11"/><text x="26.9809%" y="255.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::_{{closure}} (11 samples, 0.96%)</title><rect x="26.7309%" y="229" width="0.9641%" height="15" fill="rgb(226,22,26)" fg:x="305" fg:w="11"/><text x="26.9809%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (1 samples, 0.09%)</title><rect x="27.6074%" y="213" width="0.0876%" height="15" fill="rgb(217,163,10)" fg:x="315" fg:w="1"/><text x="27.8574%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.09%)</title><rect x="27.6074%" y="197" width="0.0876%" height="15" fill="rgb(213,25,53)" fg:x="315" fg:w="1"/><text x="27.8574%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.09%)</title><rect x="27.6074%" y="181" width="0.0876%" height="15" fill="rgb(252,105,26)" fg:x="315" fg:w="1"/><text x="27.8574%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.09%)</title><rect x="27.6074%" y="165" width="0.0876%" height="15" fill="rgb(220,39,43)" fg:x="315" fg:w="1"/><text x="27.8574%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (2 samples, 0.18%)</title><rect x="28.3085%" y="261" width="0.1753%" height="15" fill="rgb(229,68,48)" fg:x="323" fg:w="2"/><text x="28.5585%" y="271.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (2 samples, 0.18%)</title><rect x="28.3085%" y="245" width="0.1753%" height="15" fill="rgb(252,8,32)" fg:x="323" fg:w="2"/><text x="28.5585%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (2 samples, 0.18%)</title><rect x="28.3085%" y="229" width="0.1753%" height="15" fill="rgb(223,20,43)" fg:x="323" fg:w="2"/><text x="28.5585%" y="239.50"></text></g><g><title>core::ptr::read (2 samples, 0.18%)</title><rect x="28.3085%" y="213" width="0.1753%" height="15" fill="rgb(229,81,49)" fg:x="323" fg:w="2"/><text x="28.5585%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.35%)</title><rect x="30.9378%" y="229" width="0.3506%" height="15" fill="rgb(236,28,36)" fg:x="353" fg:w="4"/><text x="31.1878%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.35%)</title><rect x="30.9378%" y="213" width="0.3506%" height="15" fill="rgb(249,185,26)" fg:x="353" fg:w="4"/><text x="31.1878%" y="223.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (5 samples, 0.44%)</title><rect x="31.2883%" y="229" width="0.4382%" height="15" fill="rgb(249,174,33)" fg:x="357" fg:w="5"/><text x="31.5383%" y="239.50"></text></g><g><title>[libc.so.6] (76 samples, 6.66%)</title><rect x="33.1288%" y="165" width="6.6608%" height="15" fill="rgb(233,201,37)" fg:x="378" fg:w="76"/><text x="33.3788%" y="175.50">[libc.so...</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (154 samples, 13.50%)</title><rect x="27.6950%" y="293" width="13.4969%" height="15" fill="rgb(221,78,26)" fg:x="316" fg:w="154"/><text x="27.9450%" y="303.50">alloc::collections::..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (154 samples, 13.50%)</title><rect x="27.6950%" y="277" width="13.4969%" height="15" fill="rgb(250,127,30)" fg:x="316" fg:w="154"/><text x="27.9450%" y="287.50">alloc::collections::..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (145 samples, 12.71%)</title><rect x="28.4838%" y="261" width="12.7082%" height="15" fill="rgb(230,49,44)" fg:x="325" fg:w="145"/><text x="28.7338%" y="271.50">alloc::collections:..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (145 samples, 12.71%)</title><rect x="28.4838%" y="245" width="12.7082%" height="15" fill="rgb(229,67,23)" fg:x="325" fg:w="145"/><text x="28.7338%" y="255.50">alloc::collections:..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for &amp;A&gt;::cmp (108 samples, 9.47%)</title><rect x="31.7266%" y="229" width="9.4654%" height="15" fill="rgb(249,83,47)" fg:x="362" fg:w="108"/><text x="31.9766%" y="239.50">core::cmp::imp..</text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (108 samples, 9.47%)</title><rect x="31.7266%" y="213" width="9.4654%" height="15" fill="rgb(215,43,3)" fg:x="362" fg:w="108"/><text x="31.9766%" y="223.50">core::str::tra..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (108 samples, 9.47%)</title><rect x="31.7266%" y="197" width="9.4654%" height="15" fill="rgb(238,154,13)" fg:x="362" fg:w="108"/><text x="31.9766%" y="207.50">core::slice::c..</text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (108 samples, 9.47%)</title><rect x="31.7266%" y="181" width="9.4654%" height="15" fill="rgb(219,56,2)" fg:x="362" fg:w="108"/><text x="31.9766%" y="191.50">&lt;u8 as core::s..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (16 samples, 1.40%)</title><rect x="39.7897%" y="165" width="1.4023%" height="15" fill="rgb(233,0,4)" fg:x="454" fg:w="16"/><text x="40.0397%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (1 samples, 0.09%)</title><rect x="41.2796%" y="261" width="0.0876%" height="15" fill="rgb(235,30,7)" fg:x="471" fg:w="1"/><text x="41.5296%" y="271.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (1 samples, 0.09%)</title><rect x="41.2796%" y="245" width="0.0876%" height="15" fill="rgb(250,79,13)" fg:x="471" fg:w="1"/><text x="41.5296%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (1 samples, 0.09%)</title><rect x="41.2796%" y="229" width="0.0876%" height="15" fill="rgb(211,146,34)" fg:x="471" fg:w="1"/><text x="41.5296%" y="239.50"></text></g><g><title>core::ptr::read (1 samples, 0.09%)</title><rect x="41.2796%" y="213" width="0.0876%" height="15" fill="rgb(228,22,38)" fg:x="471" fg:w="1"/><text x="41.5296%" y="223.50"></text></g><g><title>&lt;&amp;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (1 samples, 0.09%)</title><rect x="42.0684%" y="229" width="0.0876%" height="15" fill="rgb(235,168,5)" fg:x="480" fg:w="1"/><text x="42.3184%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.26%)</title><rect x="42.1560%" y="229" width="0.2629%" height="15" fill="rgb(221,155,16)" fg:x="481" fg:w="3"/><text x="42.4060%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.26%)</title><rect x="42.1560%" y="213" width="0.2629%" height="15" fill="rgb(215,215,53)" fg:x="481" fg:w="3"/><text x="42.4060%" y="223.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (5 samples, 0.44%)</title><rect x="42.4189%" y="229" width="0.4382%" height="15" fill="rgb(223,4,10)" fg:x="484" fg:w="5"/><text x="42.6689%" y="239.50"></text></g><g><title>[libc.so.6] (33 samples, 2.89%)</title><rect x="43.8212%" y="181" width="2.8922%" height="15" fill="rgb(234,103,6)" fg:x="500" fg:w="33"/><text x="44.0712%" y="191.50">[l..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (69 samples, 6.05%)</title><rect x="41.1919%" y="277" width="6.0473%" height="15" fill="rgb(227,97,0)" fg:x="470" fg:w="69"/><text x="41.4419%" y="287.50">alloc::c..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (67 samples, 5.87%)</title><rect x="41.3672%" y="261" width="5.8720%" height="15" fill="rgb(234,150,53)" fg:x="472" fg:w="67"/><text x="41.6172%" y="271.50">alloc::..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (67 samples, 5.87%)</title><rect x="41.3672%" y="245" width="5.8720%" height="15" fill="rgb(228,201,54)" fg:x="472" fg:w="67"/><text x="41.6172%" y="255.50">alloc::..</text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (50 samples, 4.38%)</title><rect x="42.8571%" y="229" width="4.3821%" height="15" fill="rgb(222,22,37)" fg:x="489" fg:w="50"/><text x="43.1071%" y="239.50">core:..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (50 samples, 4.38%)</title><rect x="42.8571%" y="213" width="4.3821%" height="15" fill="rgb(237,53,32)" fg:x="489" fg:w="50"/><text x="43.1071%" y="223.50">core:..</text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (50 samples, 4.38%)</title><rect x="42.8571%" y="197" width="4.3821%" height="15" fill="rgb(233,25,53)" fg:x="489" fg:w="50"/><text x="43.1071%" y="207.50">&lt;u8 a..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (6 samples, 0.53%)</title><rect x="46.7134%" y="181" width="0.5259%" height="15" fill="rgb(210,40,34)" fg:x="533" fg:w="6"/><text x="46.9634%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (70 samples, 6.13%)</title><rect x="41.1919%" y="293" width="6.1350%" height="15" fill="rgb(241,220,44)" fg:x="470" fg:w="70"/><text x="41.4419%" y="303.50">alloc::c..</text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.09%)</title><rect x="47.2393%" y="277" width="0.0876%" height="15" fill="rgb(235,28,35)" fg:x="539" fg:w="1"/><text x="47.4893%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (3 samples, 0.26%)</title><rect x="47.4145%" y="213" width="0.2629%" height="15" fill="rgb(210,56,17)" fg:x="541" fg:w="3"/><text x="47.6645%" y="223.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (1 samples, 0.09%)</title><rect x="47.6775%" y="197" width="0.0876%" height="15" fill="rgb(224,130,29)" fg:x="544" fg:w="1"/><text x="47.9275%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (1 samples, 0.09%)</title><rect x="47.6775%" y="181" width="0.0876%" height="15" fill="rgb(235,212,8)" fg:x="544" fg:w="1"/><text x="47.9275%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (1 samples, 0.09%)</title><rect x="47.6775%" y="165" width="0.0876%" height="15" fill="rgb(223,33,50)" fg:x="544" fg:w="1"/><text x="47.9275%" y="175.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::last_leaf_edge (2 samples, 0.18%)</title><rect x="47.7651%" y="197" width="0.1753%" height="15" fill="rgb(219,149,13)" fg:x="545" fg:w="2"/><text x="48.0151%" y="207.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (2 samples, 0.18%)</title><rect x="47.7651%" y="181" width="0.1753%" height="15" fill="rgb(250,156,29)" fg:x="545" fg:w="2"/><text x="48.0151%" y="191.50"></text></g><g><title>alloc::collections::btree::fix::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::fix_node_and_affected_ancestors (1 samples, 0.09%)</title><rect x="48.1157%" y="181" width="0.0876%" height="15" fill="rgb(216,193,19)" fg:x="549" fg:w="1"/><text x="48.3657%" y="191.50"></text></g><g><title>alloc::collections::btree::fix::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::fix_node_through_parent (1 samples, 0.09%)</title><rect x="48.1157%" y="165" width="0.0876%" height="15" fill="rgb(216,135,14)" fg:x="549" fg:w="1"/><text x="48.3657%" y="175.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_parent (1 samples, 0.09%)</title><rect x="48.1157%" y="149" width="0.0876%" height="15" fill="rgb(241,47,5)" fg:x="549" fg:w="1"/><text x="48.3657%" y="159.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::do_merge (1 samples, 0.09%)</title><rect x="48.1157%" y="133" width="0.0876%" height="15" fill="rgb(233,42,35)" fg:x="549" fg:w="1"/><text x="48.3657%" y="143.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (1 samples, 0.09%)</title><rect x="48.1157%" y="117" width="0.0876%" height="15" fill="rgb(231,13,6)" fg:x="549" fg:w="1"/><text x="48.3657%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.09%)</title><rect x="48.1157%" y="101" width="0.0876%" height="15" fill="rgb(207,181,40)" fg:x="549" fg:w="1"/><text x="48.3657%" y="111.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="48.1157%" y="85" width="0.0876%" height="15" fill="rgb(254,173,49)" fg:x="549" fg:w="1"/><text x="48.3657%" y="95.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_internal_kv (7 samples, 0.61%)</title><rect x="47.6775%" y="213" width="0.6135%" height="15" fill="rgb(221,1,38)" fg:x="544" fg:w="7"/><text x="47.9275%" y="223.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (4 samples, 0.35%)</title><rect x="47.9404%" y="197" width="0.3506%" height="15" fill="rgb(206,124,46)" fg:x="547" fg:w="4"/><text x="48.1904%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::remove (1 samples, 0.09%)</title><rect x="48.2033%" y="181" width="0.0876%" height="15" fill="rgb(249,21,11)" fg:x="550" fg:w="1"/><text x="48.4533%" y="191.50"></text></g><g><title>alloc::collections::btree::node::slice_remove (1 samples, 0.09%)</title><rect x="48.2033%" y="165" width="0.0876%" height="15" fill="rgb(222,201,40)" fg:x="550" fg:w="1"/><text x="48.4533%" y="175.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (1 samples, 0.09%)</title><rect x="48.2033%" y="149" width="0.0876%" height="15" fill="rgb(235,61,29)" fg:x="550" fg:w="1"/><text x="48.4533%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (1 samples, 0.09%)</title><rect x="48.2033%" y="133" width="0.0876%" height="15" fill="rgb(219,207,3)" fg:x="550" fg:w="1"/><text x="48.4533%" y="143.50"></text></g><g><title>core::ptr::read (1 samples, 0.09%)</title><rect x="48.2033%" y="117" width="0.0876%" height="15" fill="rgb(222,56,46)" fg:x="550" fg:w="1"/><text x="48.4533%" y="127.50"></text></g><g><title>alloc::collections::btree::fix::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::fix_node_and_affected_ancestors (1 samples, 0.09%)</title><rect x="48.6415%" y="197" width="0.0876%" height="15" fill="rgb(239,76,54)" fg:x="555" fg:w="1"/><text x="48.8915%" y="207.50"></text></g><g><title>alloc::collections::btree::fix::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::fix_node_through_parent (1 samples, 0.09%)</title><rect x="48.6415%" y="181" width="0.0876%" height="15" fill="rgb(231,124,27)" fg:x="555" fg:w="1"/><text x="48.8915%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::choose_parent_kv (1 samples, 0.09%)</title><rect x="48.6415%" y="165" width="0.0876%" height="15" fill="rgb(249,195,6)" fg:x="555" fg:w="1"/><text x="48.8915%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (1 samples, 0.09%)</title><rect x="48.6415%" y="149" width="0.0876%" height="15" fill="rgb(237,174,47)" fg:x="555" fg:w="1"/><text x="48.8915%" y="159.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.09%)</title><rect x="48.6415%" y="133" width="0.0876%" height="15" fill="rgb(206,201,31)" fg:x="555" fg:w="1"/><text x="48.8915%" y="143.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::can_merge (1 samples, 0.09%)</title><rect x="48.7292%" y="197" width="0.0876%" height="15" fill="rgb(231,57,52)" fg:x="556" fg:w="1"/><text x="48.9792%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.26%)</title><rect x="48.8168%" y="149" width="0.2629%" height="15" fill="rgb(248,177,22)" fg:x="557" fg:w="3"/><text x="49.0668%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.26%)</title><rect x="48.8168%" y="133" width="0.2629%" height="15" fill="rgb(215,211,37)" fg:x="557" fg:w="3"/><text x="49.0668%" y="143.50"></text></g><g><title>cfree (3 samples, 0.26%)</title><rect x="48.8168%" y="117" width="0.2629%" height="15" fill="rgb(241,128,51)" fg:x="557" fg:w="3"/><text x="49.0668%" y="127.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="48.9921%" y="101" width="0.0876%" height="15" fill="rgb(227,165,31)" fg:x="559" fg:w="1"/><text x="49.2421%" y="111.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::correct_childrens_parent_links (1 samples, 0.09%)</title><rect x="49.0798%" y="149" width="0.0876%" height="15" fill="rgb(228,167,24)" fg:x="560" fg:w="1"/><text x="49.3298%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::correct_parent_link (1 samples, 0.09%)</title><rect x="49.0798%" y="133" width="0.0876%" height="15" fill="rgb(228,143,12)" fg:x="560" fg:w="1"/><text x="49.3298%" y="143.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::set_parent_link (1 samples, 0.09%)</title><rect x="49.0798%" y="117" width="0.0876%" height="15" fill="rgb(249,149,8)" fg:x="560" fg:w="1"/><text x="49.3298%" y="127.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.09%)</title><rect x="49.0798%" y="101" width="0.0876%" height="15" fill="rgb(243,35,44)" fg:x="560" fg:w="1"/><text x="49.3298%" y="111.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (5 samples, 0.44%)</title><rect x="48.8168%" y="197" width="0.4382%" height="15" fill="rgb(246,89,9)" fg:x="557" fg:w="5"/><text x="49.0668%" y="207.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child (5 samples, 0.44%)</title><rect x="48.8168%" y="181" width="0.4382%" height="15" fill="rgb(233,213,13)" fg:x="557" fg:w="5"/><text x="49.0668%" y="191.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::do_merge (5 samples, 0.44%)</title><rect x="48.8168%" y="165" width="0.4382%" height="15" fill="rgb(233,141,41)" fg:x="557" fg:w="5"/><text x="49.0668%" y="175.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (1 samples, 0.09%)</title><rect x="49.1674%" y="149" width="0.0876%" height="15" fill="rgb(239,167,4)" fg:x="561" fg:w="1"/><text x="49.4174%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.09%)</title><rect x="49.1674%" y="133" width="0.0876%" height="15" fill="rgb(209,217,16)" fg:x="561" fg:w="1"/><text x="49.4174%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="49.1674%" y="117" width="0.0876%" height="15" fill="rgb(219,88,35)" fg:x="561" fg:w="1"/><text x="49.4174%" y="127.50"></text></g><g><title>core::intrinsics::copy (7 samples, 0.61%)</title><rect x="49.2550%" y="165" width="0.6135%" height="15" fill="rgb(220,193,23)" fg:x="562" fg:w="7"/><text x="49.5050%" y="175.50"></text></g><g><title>[libc.so.6] (7 samples, 0.61%)</title><rect x="49.2550%" y="149" width="0.6135%" height="15" fill="rgb(230,90,52)" fg:x="562" fg:w="7"/><text x="49.5050%" y="159.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (3 samples, 0.26%)</title><rect x="49.8685%" y="165" width="0.2629%" height="15" fill="rgb(252,106,19)" fg:x="569" fg:w="3"/><text x="50.1185%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (3 samples, 0.26%)</title><rect x="49.8685%" y="149" width="0.2629%" height="15" fill="rgb(206,74,20)" fg:x="569" fg:w="3"/><text x="50.1185%" y="159.50"></text></g><g><title>core::ptr::read (3 samples, 0.26%)</title><rect x="49.8685%" y="133" width="0.2629%" height="15" fill="rgb(230,138,44)" fg:x="569" fg:w="3"/><text x="50.1185%" y="143.50"></text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_entry (34 samples, 2.98%)</title><rect x="47.4145%" y="261" width="2.9798%" height="15" fill="rgb(235,182,43)" fg:x="541" fg:w="34"/><text x="47.6645%" y="271.50">all..</text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (34 samples, 2.98%)</title><rect x="47.4145%" y="245" width="2.9798%" height="15" fill="rgb(242,16,51)" fg:x="541" fg:w="34"/><text x="47.6645%" y="255.50">all..</text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (34 samples, 2.98%)</title><rect x="47.4145%" y="229" width="2.9798%" height="15" fill="rgb(248,9,4)" fg:x="541" fg:w="34"/><text x="47.6645%" y="239.50">all..</text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (24 samples, 2.10%)</title><rect x="48.2910%" y="213" width="2.1034%" height="15" fill="rgb(210,31,22)" fg:x="551" fg:w="24"/><text x="48.5410%" y="223.50">a..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::remove (13 samples, 1.14%)</title><rect x="49.2550%" y="197" width="1.1394%" height="15" fill="rgb(239,54,39)" fg:x="562" fg:w="13"/><text x="49.5050%" y="207.50"></text></g><g><title>alloc::collections::btree::node::slice_remove (13 samples, 1.14%)</title><rect x="49.2550%" y="181" width="1.1394%" height="15" fill="rgb(230,99,41)" fg:x="562" fg:w="13"/><text x="49.5050%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.26%)</title><rect x="50.1315%" y="165" width="0.2629%" height="15" fill="rgb(253,106,12)" fg:x="572" fg:w="3"/><text x="50.3815%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (3 samples, 0.26%)</title><rect x="50.3944%" y="245" width="0.2629%" height="15" fill="rgb(213,46,41)" fg:x="575" fg:w="3"/><text x="50.6444%" y="255.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (3 samples, 0.26%)</title><rect x="50.3944%" y="229" width="0.2629%" height="15" fill="rgb(215,133,35)" fg:x="575" fg:w="3"/><text x="50.6444%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (3 samples, 0.26%)</title><rect x="50.3944%" y="213" width="0.2629%" height="15" fill="rgb(213,28,5)" fg:x="575" fg:w="3"/><text x="50.6444%" y="223.50"></text></g><g><title>core::ptr::read (3 samples, 0.26%)</title><rect x="50.3944%" y="197" width="0.2629%" height="15" fill="rgb(215,77,49)" fg:x="575" fg:w="3"/><text x="50.6444%" y="207.50"></text></g><g><title>&lt;&amp;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (1 samples, 0.09%)</title><rect x="51.2708%" y="213" width="0.0876%" height="15" fill="rgb(248,100,22)" fg:x="585" fg:w="1"/><text x="51.5208%" y="223.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (3 samples, 0.26%)</title><rect x="51.3585%" y="213" width="0.2629%" height="15" fill="rgb(208,67,9)" fg:x="586" fg:w="3"/><text x="51.6085%" y="223.50"></text></g><g><title>[libc.so.6] (38 samples, 3.33%)</title><rect x="52.2349%" y="165" width="3.3304%" height="15" fill="rgb(219,133,21)" fg:x="596" fg:w="38"/><text x="52.4849%" y="175.50">[li..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (64 samples, 5.61%)</title><rect x="50.3944%" y="261" width="5.6091%" height="15" fill="rgb(246,46,29)" fg:x="575" fg:w="64"/><text x="50.6444%" y="271.50">alloc::..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (61 samples, 5.35%)</title><rect x="50.6573%" y="245" width="5.3462%" height="15" fill="rgb(246,185,52)" fg:x="578" fg:w="61"/><text x="50.9073%" y="255.50">alloc::..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (61 samples, 5.35%)</title><rect x="50.6573%" y="229" width="5.3462%" height="15" fill="rgb(252,136,11)" fg:x="578" fg:w="61"/><text x="50.9073%" y="239.50">alloc::..</text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (50 samples, 4.38%)</title><rect x="51.6214%" y="213" width="4.3821%" height="15" fill="rgb(219,138,53)" fg:x="589" fg:w="50"/><text x="51.8714%" y="223.50">core:..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (50 samples, 4.38%)</title><rect x="51.6214%" y="197" width="4.3821%" height="15" fill="rgb(211,51,23)" fg:x="589" fg:w="50"/><text x="51.8714%" y="207.50">core:..</text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (50 samples, 4.38%)</title><rect x="51.6214%" y="181" width="4.3821%" height="15" fill="rgb(247,221,28)" fg:x="589" fg:w="50"/><text x="51.8714%" y="191.50">&lt;u8 a..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (5 samples, 0.44%)</title><rect x="55.5653%" y="165" width="0.4382%" height="15" fill="rgb(251,222,45)" fg:x="634" fg:w="5"/><text x="55.8153%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (103 samples, 9.03%)</title><rect x="47.3269%" y="293" width="9.0272%" height="15" fill="rgb(217,162,53)" fg:x="540" fg:w="103"/><text x="47.5769%" y="303.50">alloc::collec..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove_entry (103 samples, 9.03%)</title><rect x="47.3269%" y="277" width="9.0272%" height="15" fill="rgb(229,93,14)" fg:x="540" fg:w="103"/><text x="47.5769%" y="287.50">alloc::collec..</text></g><g><title>core::option::Option&lt;T&gt;::as_mut (4 samples, 0.35%)</title><rect x="56.0035%" y="261" width="0.3506%" height="15" fill="rgb(209,67,49)" fg:x="639" fg:w="4"/><text x="56.2535%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::Entry&lt;K,V,A&gt;::and_modify (7 samples, 0.61%)</title><rect x="56.3541%" y="293" width="0.6135%" height="15" fill="rgb(213,87,29)" fg:x="643" fg:w="7"/><text x="56.6041%" y="303.50"></text></g><g><title>dev::update_a_set_neighbors::_{{closure}} (1 samples, 0.09%)</title><rect x="56.8799%" y="277" width="0.0876%" height="15" fill="rgb(205,151,52)" fg:x="649" fg:w="1"/><text x="57.1299%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::DormantMut,K,V,NodeType&gt;,HandleType&gt;::awaken (2 samples, 0.18%)</title><rect x="57.5811%" y="245" width="0.1753%" height="15" fill="rgb(253,215,39)" fg:x="657" fg:w="2"/><text x="57.8311%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (8 samples, 0.70%)</title><rect x="57.9316%" y="229" width="0.7011%" height="15" fill="rgb(221,220,41)" fg:x="661" fg:w="8"/><text x="58.1816%" y="239.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (8 samples, 0.70%)</title><rect x="57.9316%" y="213" width="0.7011%" height="15" fill="rgb(218,133,21)" fg:x="661" fg:w="8"/><text x="58.1816%" y="223.50"></text></g><g><title>core::intrinsics::copy (6 samples, 0.53%)</title><rect x="58.1069%" y="197" width="0.5259%" height="15" fill="rgb(221,193,43)" fg:x="663" fg:w="6"/><text x="58.3569%" y="207.50"></text></g><g><title>[libc.so.6] (6 samples, 0.53%)</title><rect x="58.1069%" y="181" width="0.5259%" height="15" fill="rgb(240,128,52)" fg:x="663" fg:w="6"/><text x="58.3569%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (3 samples, 0.26%)</title><rect x="58.6328%" y="229" width="0.2629%" height="15" fill="rgb(253,114,12)" fg:x="669" fg:w="3"/><text x="58.8828%" y="239.50"></text></g><g><title>alloc::collections::btree::map::entry::Entry&lt;K,V,A&gt;::or_insert (23 samples, 2.02%)</title><rect x="56.9676%" y="293" width="2.0158%" height="15" fill="rgb(215,223,47)" fg:x="650" fg:w="23"/><text x="57.2176%" y="303.50">a..</text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (22 samples, 1.93%)</title><rect x="57.0552%" y="277" width="1.9281%" height="15" fill="rgb(248,225,23)" fg:x="651" fg:w="22"/><text x="57.3052%" y="287.50">a..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (17 samples, 1.49%)</title><rect x="57.4934%" y="261" width="1.4899%" height="15" fill="rgb(250,108,0)" fg:x="656" fg:w="17"/><text x="57.7434%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (14 samples, 1.23%)</title><rect x="57.7564%" y="245" width="1.2270%" height="15" fill="rgb(228,208,7)" fg:x="659" fg:w="14"/><text x="58.0064%" y="255.50"></text></g><g><title>alloc::collections::btree::node::splitpoint (1 samples, 0.09%)</title><rect x="58.8957%" y="229" width="0.0876%" height="15" fill="rgb(244,45,10)" fg:x="672" fg:w="1"/><text x="59.1457%" y="239.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::reborrow (3 samples, 0.26%)</title><rect x="58.9833%" y="245" width="0.2629%" height="15" fill="rgb(207,125,25)" fg:x="673" fg:w="3"/><text x="59.2333%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (8 samples, 0.70%)</title><rect x="60.0351%" y="229" width="0.7011%" height="15" fill="rgb(210,195,18)" fg:x="685" fg:w="8"/><text x="60.2851%" y="239.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (8 samples, 0.70%)</title><rect x="60.0351%" y="213" width="0.7011%" height="15" fill="rgb(249,80,12)" fg:x="685" fg:w="8"/><text x="60.2851%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (8 samples, 0.70%)</title><rect x="60.0351%" y="197" width="0.7011%" height="15" fill="rgb(221,65,9)" fg:x="685" fg:w="8"/><text x="60.2851%" y="207.50"></text></g><g><title>core::ptr::read (8 samples, 0.70%)</title><rect x="60.0351%" y="181" width="0.7011%" height="15" fill="rgb(235,49,36)" fg:x="685" fg:w="8"/><text x="60.2851%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.79%)</title><rect x="66.0824%" y="197" width="0.7888%" height="15" fill="rgb(225,32,20)" fg:x="754" fg:w="9"/><text x="66.3324%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.79%)</title><rect x="66.0824%" y="181" width="0.7888%" height="15" fill="rgb(215,141,46)" fg:x="754" fg:w="9"/><text x="66.3324%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (21 samples, 1.84%)</title><rect x="66.8712%" y="197" width="1.8405%" height="15" fill="rgb(250,160,47)" fg:x="763" fg:w="21"/><text x="67.1212%" y="207.50">a..</text></g><g><title>[libc.so.6] (145 samples, 12.71%)</title><rect x="73.4443%" y="133" width="12.7082%" height="15" fill="rgb(216,222,40)" fg:x="838" fg:w="145"/><text x="73.6943%" y="143.50">[libc.so.6]</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (367 samples, 32.16%)</title><rect x="59.2463%" y="245" width="32.1648%" height="15" fill="rgb(234,217,39)" fg:x="676" fg:w="367"/><text x="59.4963%" y="255.50">alloc::collections::btree::search::&lt;impl alloc::coll..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (350 samples, 30.67%)</title><rect x="60.7362%" y="229" width="30.6748%" height="15" fill="rgb(207,178,40)" fg:x="693" fg:w="350"/><text x="60.9862%" y="239.50">alloc::collections::btree::search::&lt;impl alloc::c..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (350 samples, 30.67%)</title><rect x="60.7362%" y="213" width="30.6748%" height="15" fill="rgb(221,136,13)" fg:x="693" fg:w="350"/><text x="60.9862%" y="223.50">alloc::collections::btree::search::&lt;impl alloc::c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for &amp;A&gt;::cmp (259 samples, 22.70%)</title><rect x="68.7117%" y="197" width="22.6994%" height="15" fill="rgb(249,199,10)" fg:x="784" fg:w="259"/><text x="68.9617%" y="207.50">core::cmp::impls::&lt;impl core::cmp::O..</text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (259 samples, 22.70%)</title><rect x="68.7117%" y="181" width="22.6994%" height="15" fill="rgb(249,222,13)" fg:x="784" fg:w="259"/><text x="68.9617%" y="191.50">core::str::traits::&lt;impl core::cmp::..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (259 samples, 22.70%)</title><rect x="68.7117%" y="165" width="22.6994%" height="15" fill="rgb(244,185,38)" fg:x="784" fg:w="259"/><text x="68.9617%" y="175.50">core::slice::cmp::&lt;impl core::cmp::O..</text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (259 samples, 22.70%)</title><rect x="68.7117%" y="149" width="22.6994%" height="15" fill="rgb(236,202,9)" fg:x="784" fg:w="259"/><text x="68.9617%" y="159.50">&lt;u8 as core::slice::cmp::SliceOrd&gt;::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (60 samples, 5.26%)</title><rect x="86.1525%" y="133" width="5.2585%" height="15" fill="rgb(250,229,37)" fg:x="983" fg:w="60"/><text x="86.4025%" y="143.50">core::..</text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::contains (372 samples, 32.60%)</title><rect x="58.9833%" y="293" width="32.6030%" height="15" fill="rgb(206,174,23)" fg:x="673" fg:w="372"/><text x="59.2333%" y="303.50">alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::contai..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::contains_key (372 samples, 32.60%)</title><rect x="58.9833%" y="277" width="32.6030%" height="15" fill="rgb(211,33,43)" fg:x="673" fg:w="372"/><text x="59.2333%" y="287.50">alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::cont..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (372 samples, 32.60%)</title><rect x="58.9833%" y="261" width="32.6030%" height="15" fill="rgb(245,58,50)" fg:x="673" fg:w="372"/><text x="59.2333%" y="271.50">alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get</text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.18%)</title><rect x="91.4110%" y="245" width="0.1753%" height="15" fill="rgb(244,68,36)" fg:x="1043" fg:w="2"/><text x="91.6610%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (1 samples, 0.09%)</title><rect x="92.1998%" y="229" width="0.0876%" height="15" fill="rgb(232,229,15)" fg:x="1052" fg:w="1"/><text x="92.4498%" y="239.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (1 samples, 0.09%)</title><rect x="92.1998%" y="213" width="0.0876%" height="15" fill="rgb(254,30,23)" fg:x="1052" fg:w="1"/><text x="92.4498%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.35%)</title><rect x="93.2515%" y="197" width="0.3506%" height="15" fill="rgb(235,160,14)" fg:x="1064" fg:w="4"/><text x="93.5015%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.35%)</title><rect x="93.2515%" y="181" width="0.3506%" height="15" fill="rgb(212,155,44)" fg:x="1064" fg:w="4"/><text x="93.5015%" y="191.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.09%)</title><rect x="93.5145%" y="165" width="0.0876%" height="15" fill="rgb(226,2,50)" fg:x="1067" fg:w="1"/><text x="93.7645%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (4 samples, 0.35%)</title><rect x="93.6021%" y="197" width="0.3506%" height="15" fill="rgb(234,177,6)" fg:x="1068" fg:w="4"/><text x="93.8521%" y="207.50"></text></g><g><title>[libc.so.6] (38 samples, 3.33%)</title><rect x="94.3909%" y="133" width="3.3304%" height="15" fill="rgb(217,24,9)" fg:x="1077" fg:w="38"/><text x="94.6409%" y="143.50">[li..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (78 samples, 6.84%)</title><rect x="91.5863%" y="261" width="6.8361%" height="15" fill="rgb(220,13,46)" fg:x="1045" fg:w="78"/><text x="91.8363%" y="271.50">alloc::co..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (76 samples, 6.66%)</title><rect x="91.7616%" y="245" width="6.6608%" height="15" fill="rgb(239,221,27)" fg:x="1047" fg:w="76"/><text x="92.0116%" y="255.50">alloc::co..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (70 samples, 6.13%)</title><rect x="92.2875%" y="229" width="6.1350%" height="15" fill="rgb(222,198,25)" fg:x="1053" fg:w="70"/><text x="92.5375%" y="239.50">alloc::c..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (70 samples, 6.13%)</title><rect x="92.2875%" y="213" width="6.1350%" height="15" fill="rgb(211,99,13)" fg:x="1053" fg:w="70"/><text x="92.5375%" y="223.50">alloc::c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for &amp;A&gt;::cmp (51 samples, 4.47%)</title><rect x="93.9527%" y="197" width="4.4698%" height="15" fill="rgb(232,111,31)" fg:x="1072" fg:w="51"/><text x="94.2027%" y="207.50">core:..</text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (51 samples, 4.47%)</title><rect x="93.9527%" y="181" width="4.4698%" height="15" fill="rgb(245,82,37)" fg:x="1072" fg:w="51"/><text x="94.2027%" y="191.50">core:..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (51 samples, 4.47%)</title><rect x="93.9527%" y="165" width="4.4698%" height="15" fill="rgb(227,149,46)" fg:x="1072" fg:w="51"/><text x="94.2027%" y="175.50">core:..</text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (51 samples, 4.47%)</title><rect x="93.9527%" y="149" width="4.4698%" height="15" fill="rgb(218,36,50)" fg:x="1072" fg:w="51"/><text x="94.2027%" y="159.50">&lt;u8 a..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (8 samples, 0.70%)</title><rect x="97.7213%" y="133" width="0.7011%" height="15" fill="rgb(226,80,48)" fg:x="1115" fg:w="8"/><text x="97.9713%" y="143.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::correct_parent_link (1 samples, 0.09%)</title><rect x="98.6854%" y="181" width="0.0876%" height="15" fill="rgb(238,224,15)" fg:x="1126" fg:w="1"/><text x="98.9354%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::set_parent_link (1 samples, 0.09%)</title><rect x="98.6854%" y="165" width="0.0876%" height="15" fill="rgb(241,136,10)" fg:x="1126" fg:w="1"/><text x="98.9354%" y="175.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.09%)</title><rect x="98.6854%" y="149" width="0.0876%" height="15" fill="rgb(208,32,45)" fg:x="1126" fg:w="1"/><text x="98.9354%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (2 samples, 0.18%)</title><rect x="98.6854%" y="229" width="0.1753%" height="15" fill="rgb(207,135,9)" fg:x="1126" fg:w="2"/><text x="98.9354%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (2 samples, 0.18%)</title><rect x="98.6854%" y="213" width="0.1753%" height="15" fill="rgb(206,86,44)" fg:x="1126" fg:w="2"/><text x="98.9354%" y="223.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::correct_childrens_parent_links (2 samples, 0.18%)</title><rect x="98.6854%" y="197" width="0.1753%" height="15" fill="rgb(245,177,15)" fg:x="1126" fg:w="2"/><text x="98.9354%" y="207.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.09%)</title><rect x="98.7730%" y="181" width="0.0876%" height="15" fill="rgb(206,64,50)" fg:x="1127" fg:w="1"/><text x="99.0230%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.09%)</title><rect x="98.7730%" y="165" width="0.0876%" height="15" fill="rgb(234,36,40)" fg:x="1127" fg:w="1"/><text x="99.0230%" y="175.50"></text></g><g><title>core::intrinsics::copy (2 samples, 0.18%)</title><rect x="98.9483%" y="181" width="0.1753%" height="15" fill="rgb(213,64,8)" fg:x="1129" fg:w="2"/><text x="99.1983%" y="191.50"></text></g><g><title>[libc.so.6] (2 samples, 0.18%)</title><rect x="98.9483%" y="165" width="0.1753%" height="15" fill="rgb(210,75,36)" fg:x="1129" fg:w="2"/><text x="99.1983%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (3 samples, 0.26%)</title><rect x="98.9483%" y="213" width="0.2629%" height="15" fill="rgb(229,88,21)" fg:x="1129" fg:w="3"/><text x="99.1983%" y="223.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (3 samples, 0.26%)</title><rect x="98.9483%" y="197" width="0.2629%" height="15" fill="rgb(252,204,47)" fg:x="1129" fg:w="3"/><text x="99.1983%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.09%)</title><rect x="99.1236%" y="181" width="0.0876%" height="15" fill="rgb(208,77,27)" fg:x="1131" fg:w="1"/><text x="99.3736%" y="191.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (4 samples, 0.35%)</title><rect x="99.2112%" y="213" width="0.3506%" height="15" fill="rgb(221,76,26)" fg:x="1132" fg:w="4"/><text x="99.4612%" y="223.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (4 samples, 0.35%)</title><rect x="99.2112%" y="197" width="0.3506%" height="15" fill="rgb(225,139,18)" fg:x="1132" fg:w="4"/><text x="99.4612%" y="207.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (4 samples, 0.35%)</title><rect x="99.2112%" y="181" width="0.3506%" height="15" fill="rgb(230,137,11)" fg:x="1132" fg:w="4"/><text x="99.4612%" y="191.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (4 samples, 0.35%)</title><rect x="99.2112%" y="165" width="0.3506%" height="15" fill="rgb(212,28,1)" fg:x="1132" fg:w="4"/><text x="99.4612%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.35%)</title><rect x="99.2112%" y="149" width="0.3506%" height="15" fill="rgb(248,164,17)" fg:x="1132" fg:w="4"/><text x="99.4612%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.35%)</title><rect x="99.2112%" y="133" width="0.3506%" height="15" fill="rgb(222,171,42)" fg:x="1132" fg:w="4"/><text x="99.4612%" y="143.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.35%)</title><rect x="99.2112%" y="117" width="0.3506%" height="15" fill="rgb(243,84,45)" fg:x="1132" fg:w="4"/><text x="99.4612%" y="127.50"></text></g><g><title>malloc (3 samples, 0.26%)</title><rect x="99.2989%" y="101" width="0.2629%" height="15" fill="rgb(252,49,23)" fg:x="1133" fg:w="3"/><text x="99.5489%" y="111.50"></text></g><g><title>[libc.so.6] (2 samples, 0.18%)</title><rect x="99.3865%" y="85" width="0.1753%" height="15" fill="rgb(215,19,7)" fg:x="1134" fg:w="2"/><text x="99.6365%" y="95.50"></text></g><g><title>all (1,141 samples, 100%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(238,81,41)" fg:x="0" fg:w="1141"/><text x="0.2500%" y="655.50"></text></g><g><title>dev (1,141 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(210,199,37)" fg:x="0" fg:w="1141"/><text x="0.2500%" y="639.50">dev</text></g><g><title>_start (1,133 samples, 99.30%)</title><rect x="0.7011%" y="613" width="99.2989%" height="15" fill="rgb(244,192,49)" fg:x="8" fg:w="1133"/><text x="0.9511%" y="623.50">_start</text></g><g><title>__libc_start_main (1,133 samples, 99.30%)</title><rect x="0.7011%" y="597" width="99.2989%" height="15" fill="rgb(226,211,11)" fg:x="8" fg:w="1133"/><text x="0.9511%" y="607.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,133 samples, 99.30%)</title><rect x="0.7011%" y="581" width="99.2989%" height="15" fill="rgb(236,162,54)" fg:x="8" fg:w="1133"/><text x="0.9511%" y="591.50">[libc.so.6]</text></g><g><title>main (1,133 samples, 99.30%)</title><rect x="0.7011%" y="565" width="99.2989%" height="15" fill="rgb(220,229,9)" fg:x="8" fg:w="1133"/><text x="0.9511%" y="575.50">main</text></g><g><title>std::rt::lang_start_internal (1,133 samples, 99.30%)</title><rect x="0.7011%" y="549" width="99.2989%" height="15" fill="rgb(250,87,22)" fg:x="8" fg:w="1133"/><text x="0.9511%" y="559.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,133 samples, 99.30%)</title><rect x="0.7011%" y="533" width="99.2989%" height="15" fill="rgb(239,43,17)" fg:x="8" fg:w="1133"/><text x="0.9511%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,133 samples, 99.30%)</title><rect x="0.7011%" y="517" width="99.2989%" height="15" fill="rgb(231,177,25)" fg:x="8" fg:w="1133"/><text x="0.9511%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,133 samples, 99.30%)</title><rect x="0.7011%" y="501" width="99.2989%" height="15" fill="rgb(219,179,1)" fg:x="8" fg:w="1133"/><text x="0.9511%" y="511.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,133 samples, 99.30%)</title><rect x="0.7011%" y="485" width="99.2989%" height="15" fill="rgb(238,219,53)" fg:x="8" fg:w="1133"/><text x="0.9511%" y="495.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,133 samples, 99.30%)</title><rect x="0.7011%" y="469" width="99.2989%" height="15" fill="rgb(232,167,36)" fg:x="8" fg:w="1133"/><text x="0.9511%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,133 samples, 99.30%)</title><rect x="0.7011%" y="453" width="99.2989%" height="15" fill="rgb(244,19,51)" fg:x="8" fg:w="1133"/><text x="0.9511%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,133 samples, 99.30%)</title><rect x="0.7011%" y="437" width="99.2989%" height="15" fill="rgb(224,6,22)" fg:x="8" fg:w="1133"/><text x="0.9511%" y="447.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,133 samples, 99.30%)</title><rect x="0.7011%" y="421" width="99.2989%" height="15" fill="rgb(224,145,5)" fg:x="8" fg:w="1133"/><text x="0.9511%" y="431.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (1,133 samples, 99.30%)</title><rect x="0.7011%" y="405" width="99.2989%" height="15" fill="rgb(234,130,49)" fg:x="8" fg:w="1133"/><text x="0.9511%" y="415.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,133 samples, 99.30%)</title><rect x="0.7011%" y="389" width="99.2989%" height="15" fill="rgb(254,6,2)" fg:x="8" fg:w="1133"/><text x="0.9511%" y="399.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,133 samples, 99.30%)</title><rect x="0.7011%" y="373" width="99.2989%" height="15" fill="rgb(208,96,46)" fg:x="8" fg:w="1133"/><text x="0.9511%" y="383.50">core::ops::function::FnOnce::call_once</text></g><g><title>dev::main (1,133 samples, 99.30%)</title><rect x="0.7011%" y="357" width="99.2989%" height="15" fill="rgb(239,3,39)" fg:x="8" fg:w="1133"/><text x="0.9511%" y="367.50">dev::main</text></g><g><title>dev::minimum_cut (1,130 samples, 99.04%)</title><rect x="0.9641%" y="341" width="99.0359%" height="15" fill="rgb(233,210,1)" fg:x="11" fg:w="1130"/><text x="1.2141%" y="351.50">dev::minimum_cut</text></g><g><title>dev::minimum_cut_phase (1,129 samples, 98.95%)</title><rect x="1.0517%" y="325" width="98.9483%" height="15" fill="rgb(244,137,37)" fg:x="12" fg:w="1129"/><text x="1.3017%" y="335.50">dev::minimum_cut_phase</text></g><g><title>dev::update_a_set_neighbors (862 samples, 75.55%)</title><rect x="24.4522%" y="309" width="75.5478%" height="15" fill="rgb(240,136,2)" fg:x="279" fg:w="862"/><text x="24.7022%" y="319.50">dev::update_a_set_neighbors</text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::insert (96 samples, 8.41%)</title><rect x="91.5863%" y="293" width="8.4137%" height="15" fill="rgb(239,18,37)" fg:x="1045" fg:w="96"/><text x="91.8363%" y="303.50">alloc::colle..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (96 samples, 8.41%)</title><rect x="91.5863%" y="277" width="8.4137%" height="15" fill="rgb(218,185,22)" fg:x="1045" fg:w="96"/><text x="91.8363%" y="287.50">alloc::colle..</text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (18 samples, 1.58%)</title><rect x="98.4224%" y="261" width="1.5776%" height="15" fill="rgb(225,218,4)" fg:x="1123" fg:w="18"/><text x="98.6724%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (16 samples, 1.40%)</title><rect x="98.5977%" y="245" width="1.4023%" height="15" fill="rgb(230,182,32)" fg:x="1125" fg:w="16"/><text x="98.8477%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (13 samples, 1.14%)</title><rect x="98.8606%" y="229" width="1.1394%" height="15" fill="rgb(242,56,43)" fg:x="1128" fg:w="13"/><text x="99.1106%" y="239.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (5 samples, 0.44%)</title><rect x="99.5618%" y="213" width="0.4382%" height="15" fill="rgb(233,99,24)" fg:x="1136" fg:w="5"/><text x="99.8118%" y="223.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf_ptr (1 samples, 0.09%)</title><rect x="99.9124%" y="197" width="0.0876%" height="15" fill="rgb(234,209,42)" fg:x="1140" fg:w="1"/><text x="100.1624%" y="207.50"></text></g></svg></svg>